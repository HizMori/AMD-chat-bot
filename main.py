import sys
import requests
import json
import threading
import markdown
from PyQt6.QtWidgets import (QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout,
                             QTextBrowser, QLineEdit, QPushButton, QFrame, QLabel, QStatusBar)
from PyQt6.QtCore import Qt, pyqtSignal, pyqtSlot, QSize
from PyQt6.QtGui import QKeyEvent, QIcon

class ChatBotWindow(QMainWindow):
    update_chat_signal = pyqtSignal(str)
    update_status_signal = pyqtSignal(str)

    def __init__(self):
        super().__init__()
        self.setWindowTitle("AMD ChatBot Support")
        self.setGeometry(100, 100, 800, 600)

        # –£–±–∏—Ä–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        self.setWindowFlags(Qt.WindowType.FramelessWindowHint)
        self.setStyleSheet("background-color: rgba(37, 37, 37, 200);")

        self.conversation_history = [
            {"role": "system", "content": "–í—ã ‚Äî —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫ AMD. –û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö Ryzen –∏ Radeon. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Markdown-—Ñ–æ—Ä–º–∞—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä [AMD](https://www.amd.com)."}
        ]

        self.update_chat_signal.connect(self.update_chat_area)
        self.update_status_signal.connect(self.update_status_bar)

        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        main_layout = QVBoxLayout(central_widget)

        # –ö–∞—Å—Ç–æ–º–Ω–∞—è —Ç—ë–º–Ω–∞—è –ø–æ–ª–æ—Å–∫–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        title_bar = QFrame()
        title_bar.setFixedHeight(30)
        title_bar.setStyleSheet("background-color: #1E1E1E; border: none;")
        self.title_bar = title_bar  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
        title_bar_layout = QHBoxLayout(title_bar)
        title_bar_layout.setContentsMargins(5, 0, 5, 0)
        title_bar_layout.setSpacing(0)

        title_bar_layout.addStretch()  # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å–ø—Ä–∞–≤–∞

        # –ö–Ω–æ–ø–∫–∞ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º –Ω–∞–≤–µ–¥–µ–Ω–∏—è
        minimize_button = QPushButton("-")
        minimize_button.setStyleSheet("""
            QPushButton {
                background-color: #333333; 
                color: #FFFFFF; 
                font-size: 12px; 
                padding: 2px 8px; 
                border: none; 
                border-radius: 3px;
            }
            QPushButton:hover {
                background-color: #444444;
            }
        """)
        minimize_button.setFixedSize(30, 20)
        minimize_button.clicked.connect(self.showMinimized)
        title_bar_layout.addWidget(minimize_button)

        # –ö–Ω–æ–ø–∫–∞ —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è/–Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º –Ω–∞–≤–µ–¥–µ–Ω–∏—è
        self.maximize_button = QPushButton("‚ñ°")
        self.maximize_button.setStyleSheet("""
            QPushButton {
                background-color: #333333; 
                color: #FFFFFF; 
                font-size: 12px; 
                padding: 2px 8px; 
                border: none; 
                border-radius: 3px;
            }
            QPushButton:hover {
                background-color: #444444;
            }
        """)
        self.maximize_button.setFixedSize(30, 20)
        self.maximize_button.clicked.connect(self.toggleMaximize)
        title_bar_layout.addWidget(self.maximize_button)
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º –Ω–∞–≤–µ–¥–µ–Ω–∏—è
        close_button = QPushButton("‚úñ")
        close_button.setStyleSheet("""
            QPushButton {
                background-color: #D32F2F; 
                color: #FFFFFF; 
                font-size: 12px; 
                padding: 2px 8px; 
                border: none; 
                border-radius: 3px;
            }
            QPushButton:hover {
                background-color: #E04F4F;
            }
        """)
        close_button.setFixedSize(30, 20)
        close_button.clicked.connect(self.close)
        title_bar_layout.addWidget(close_button)

        main_layout.addWidget(title_bar)

        # –°—É—â–µ—Å—Ç–≤—É—é—â–∞—è –≤–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å (top_bar) –±–µ–∑ –∫—Ä–µ—Å—Ç–∏–∫–∞
        top_bar = QFrame()
        top_bar.setFixedHeight(50)
        top_bar.setStyleSheet("background-color: #1E1E1E !important; border-bottom: 1px solid #444;")
        top_bar_layout = QHBoxLayout(top_bar)
        top_bar_layout.addWidget(QLabel("AMD", styleSheet="color: #D32F2F; font-size: 18px; font-weight: bold; padding: 5px;"))
        top_bar_layout.addWidget(QLabel("–î–æ–º | –ò–≥—Ä—ã | –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å | Smart Technology", 
                                       styleSheet="color: #AAAAAA; font-size: 14px; padding: 5px;"))
        top_bar_layout.addStretch()
        top_bar_layout.addWidget(QLineEdit(placeholderText="–ü–æ–∏—Å–∫", 
                                          styleSheet="background-color: #333333 !important; color: #FFFFFF; width: 150px;"))

        # –ö–Ω–æ–ø–∫–∞ ‚òÖ —Å —Å–µ—Ä–æ–π –∏–∫–æ–Ω–∫–æ–π
        star_button = QPushButton()
        star_button.setIcon(QIcon("path/to/star_icon.png"))  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –ø—É—Ç—å –∫ —Å–µ—Ä–æ–π –∏–∫–æ–Ω–∫–µ –∑–≤–µ–∑–¥—ã
        star_button.setIconSize(QSize(16, 16))
        star_button.setStyleSheet("""
            QPushButton {
                background-color: transparent; 
                border: none; 
                padding: 5px;
            }
            QPushButton:hover {
                background-color: #333333;
            }
        """)
        top_bar_layout.addWidget(star_button)

        # –ö–Ω–æ–ø–∫–∞ üîî —Å —Å–µ—Ä–æ–π –∏–∫–æ–Ω–∫–æ–π
        bell_button = QPushButton()
        bell_button.setIcon(QIcon("path/to/bell_icon.png"))  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –ø—É—Ç—å –∫ —Å–µ—Ä–æ–π –∏–∫–æ–Ω–∫–µ –∫–æ–ª–æ–∫–æ–ª—å—á–∏–∫–∞
        bell_button.setIconSize(QSize(16, 16))
        bell_button.setStyleSheet("""
            QPushButton {
                background-color: transparent; 
                border: none; 
                padding: 5px;
            }
            QPushButton:hover {
                background-color: #333333;
            }
        """)
        top_bar_layout.addWidget(bell_button)

        # –ö–Ω–æ–ø–∫–∞ ‚öôÔ∏è —Å —Å–µ—Ä–æ–π –∏–∫–æ–Ω–∫–æ–π
        settings_button = QPushButton()
        settings_button.setIcon(QIcon("path/to/settings_icon.png"))  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –ø—É—Ç—å –∫ —Å–µ—Ä–æ–π –∏–∫–æ–Ω–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        settings_button.setIconSize(QSize(16, 16))
        settings_button.setStyleSheet("""
            QPushButton {
                background-color: transparent; 
                border: none; 
                padding: 5px;
            }
            QPushButton:hover {
                background-color: #333333;
            }
        """)
        top_bar_layout.addWidget(settings_button)

        main_layout.addWidget(top_bar)

        chat_widget = QWidget()
        chat_layout = QVBoxLayout(chat_widget)

        chat_layout.addWidget(QLabel("–ß–∞—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π AMD", 
                                    styleSheet="color: #AAAAAA; font-size: 16px; padding: 10px; background-color: #252525 !important;"))

        self.chat_area = QTextBrowser()
        self.chat_area.setReadOnly(True)
        self.chat_area.setStyleSheet("background-color: #252525 !important; color: #FFFFFF; font-size: 14px; border: 1px solid #444444; a { color: #00B7EB; }")
        self.chat_area.setOpenExternalLinks(True)
        chat_layout.addWidget(self.chat_area)

        input_widget = QWidget()
        input_layout = QHBoxLayout(input_widget)
        self.input_field = QLineEdit()
        self.input_field.setStyleSheet("background-color: #333333 !important; color: #FFFFFF; padding: 5px; border-radius: 5px; border: 1px solid #555555;")
        self.input_field.returnPressed.connect(self.send_message)
        input_layout.addWidget(self.input_field)
        send_button = QPushButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å")
        send_button.setStyleSheet("background-color: #D32F2F; color: #FFFFFF; padding: 5px; border-radius: 5px; border: none;")
        send_button.clicked.connect(self.send_message)
        input_layout.addWidget(send_button)
        input_widget.setStyleSheet("background-color: #252525 !important;")
        input_widget.setLayout(input_layout)
        chat_layout.addWidget(input_widget)

        main_layout.addWidget(chat_widget)

        self.status_bar = QStatusBar()
        self.status_bar.setStyleSheet("color: #AAAAAA; background-color: #1E1E1E !important;")
        self.status_bar.showMessage("–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ DeepSeek API")
        self.setStatusBar(self.status_bar)

    # –ú–µ—Ç–æ–¥—ã –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –æ–∫–Ω–∞
    def mousePressEvent(self, event):
        if event.button() == Qt.MouseButton.LeftButton and self.title_bar.geometry().contains(event.pos()):
            self.drag_position = event.globalPosition().toPoint() - self.frameGeometry().topLeft()
            event.accept()

    def mouseMoveEvent(self, event):
        if hasattr(self, 'drag_position') and event.buttons() == Qt.MouseButton.LeftButton:
            self.move(event.globalPosition().toPoint() - self.drag_position)
            event.accept()

    def mouseReleaseEvent(self, event):
        if hasattr(self, 'drag_position'):
            del self.drag_position

    # –ú–µ—Ç–æ–¥ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∏ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–º —Ä–µ–∂–∏–º–∞–º–∏
    def toggleMaximize(self):
        if self.isMaximized():
            self.showNormal()
            self.maximize_button.setText("‚ñ°")
        else:
            self.showMaximized()
            self.maximize_button.setText("üóñ")

    @pyqtSlot(str)
    def update_chat_area(self, text):
        if "<" in text and ">" in text:
            self.chat_area.insertHtml(text + "<br>")
        else:
            self.chat_area.append(text)

    @pyqtSlot(str)
    def update_status_bar(self, message):
        self.status_bar.showMessage(message)

    def send_message(self):
        message = self.input_field.text().strip()
        if not message:
            return

        self.update_chat_signal.emit(f"<b>–í—ã:</b> {message}")
        self.input_field.clear()
        self.update_status_signal.emit("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...")

        thread = threading.Thread(target=self.get_deepseek_response, args=(message,), daemon=True)
        thread.start()

    def format_response(self, text):
        text = text.replace("\\n", "<br>")
        text = text.replace("\\t", "    ")
        text = text.strip()

        try:
            html_text = markdown.markdown(text)
            return html_text
        except Exception as e:
            print(f"Markdown conversion error: {e}")
            return text

    def get_deepseek_response(self, message):
        self.conversation_history.append({"role": "user", "content": message})
        print(f"Conversation history: {self.conversation_history}")

        url = "https://openrouter.ai/api/v1/chat/completions"
        headers = {
            "Authorization": "Bearer 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",
            "Content-Type": "application/json",
            "X-Title": "AMD ChatBot Support"
        }
        data = {
            "model": "tngtech/deepseek-r1t-chimera:free",
            "messages": self.conversation_history
        }
        print(f"Sending request with data: {data}")

        try:
            response = requests.post(url, headers=headers, data=json.dumps(data), timeout=10)
            print(f"Raw response: {response.text}")
            response.raise_for_status()
            response_data = response.json()
            
            bot_response = response_data["choices"][0]["message"].get("content", "")
            if not bot_response:
                bot_response = response_data["choices"][0]["message"].get("reasoning", "")
            print(f"Parsed response (content or reasoning): {bot_response}")

            if "http" not in bot_response:
                bot_response += "<br>–î–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ—Å–µ—Ç–∏—Ç–µ [—Å–∞–π—Ç AMD](https://www.amd.com)."

            formatted_response = self.format_response(bot_response)
            print(f"Formatted response: {formatted_response}")

            self.conversation_history.append({"role": "assistant", "content": bot_response})

            self.update_chat_signal.emit(f"<b>–ß–∞—Ç-–±–æ—Ç:</b>")
            self.update_chat_signal.emit(formatted_response + "<br>")
            self.update_status_signal.emit("–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ DeepSeek API")
        except Exception as e:
            print(f"Exception occurred: {str(e)}")
            self.update_chat_signal.emit(f"<b>–û—à–∏–±–∫–∞:</b> {str(e)}")
            self.update_status_signal.emit("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")

if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = ChatBotWindow()
    window.show()
    sys.exit(app.exec())