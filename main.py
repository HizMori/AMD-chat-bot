import sys
import requests
import json
import threading
import markdown
from PyQt6.QtWidgets import (QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout,
                             QTextEdit, QLineEdit, QPushButton, QFrame, QLabel, QStatusBar)
from PyQt6.QtCore import Qt

class ChatBotWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("AMD ChatBot Support")
        self.setGeometry(100, 100, 800, 600)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç—ë–º–Ω—ã–π —Ñ–æ–Ω –∏ –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
        self.setStyleSheet("background-color: rgba(37, 37, 37, 200);")  # –¢—ë–º–Ω—ã–π –ø–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω
        self.setWindowOpacity(0.95)  # –õ—ë–≥–∫–∞—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å (0.0 - –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–æ–∑—Ä–∞—á–Ω–æ, 1.0 - –Ω–µ–ø—Ä–æ–∑—Ä–∞—á–Ω–æ)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞
        self.conversation_history = [
            {"role": "system", "content": "–í—ã ‚Äî —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫ AMD. –û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö Ryzen –∏ Radeon."}
        ]

        # –ì–ª–∞–≤–Ω—ã–π –º–∞–∫–µ—Ç
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        main_layout = QVBoxLayout(central_widget)

        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å (—É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É –¥–æ 50 –ø–∏–∫—Å–µ–ª–µ–π)
        top_bar = QFrame()
        top_bar.setFixedHeight(50)
        top_bar.setStyleSheet("background-color: #1E1E1E; border-bottom: 1px solid #444;")
        top_bar_layout = QHBoxLayout(top_bar)
        
        # –õ–æ–≥–æ—Ç–∏–ø AMD (–∫—Ä–∞—Å–Ω—ã–π)
        top_bar_layout.addWidget(QLabel("AMD", styleSheet="color: #D32F2F; font-size: 18px; font-weight: bold; padding: 5px;"))
        
        # –ú–µ–Ω—é (—Å–µ—Ä—ã–π —Ç–µ–∫—Å—Ç)
        top_bar_layout.addWidget(QLabel("–î–æ–º | –ò–≥—Ä—ã | –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å | Smart Technology", 
                                       styleSheet="color: #AAAAAA; font-size: 14px; padding: 5px;"))
        top_bar_layout.addStretch()
        
        # –ü–æ–∏—Å–∫ –∏ –∏–∫–æ–Ω–∫–∏ (—Å–µ—Ä—ã–π —Ç–µ–∫—Å—Ç)
        top_bar_layout.addWidget(QLineEdit(placeholderText="–ü–æ–∏—Å–∫", 
                                          styleSheet="background-color: #333333; color: #FFFFFF; width: 150px;"))
        top_bar_layout.addWidget(QLabel("‚òÖ", styleSheet="color: #AAAAAA; padding: 5px;"))
        top_bar_layout.addWidget(QLabel("üîî", styleSheet="color: #AAAAAA; padding: 5px;"))
        top_bar_layout.addWidget(QLabel("‚öôÔ∏è", styleSheet="color: #AAAAAA; padding: 5px;"))
        top_bar_layout.addWidget(QLabel("‚ùå", styleSheet="color: #D32F2F; padding: 5px;"))
        main_layout.addWidget(top_bar)

        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –æ–±–ª–∞—Å—Ç—å (—á–∞—Ç)
        chat_widget = QWidget()
        chat_layout = QVBoxLayout(chat_widget)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —á–∞—Ç–∞
        chat_layout.addWidget(QLabel("–ß–∞—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π AMD", 
                                    styleSheet="color: #FFFFFF; font-size: 16px; padding: 10px; background-color: #252525;"))

        # –û–±–ª–∞—Å—Ç—å —á–∞—Ç–∞
        self.chat_area = QTextEdit()
        self.chat_area.setReadOnly(True)
        self.chat_area.setStyleSheet("background-color: #252525; color: #FFFFFF; font-size: 14px; border: 1px solid #444444;")
        chat_layout.addWidget(self.chat_area)

        # –ü–∞–Ω–µ–ª—å –≤–≤–æ–¥–∞
        input_widget = QWidget()
        input_layout = QHBoxLayout(input_widget)
        self.input_field = QLineEdit()
        self.input_field.setStyleSheet("background-color: #333333; color: #FFFFFF; padding: 5px; border-radius: 5px; border: 1px solid #555555;")
        input_layout.addWidget(self.input_field)
        send_button = QPushButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å")
        send_button.setStyleSheet("background-color: #D32F2F; color: #FFFFFF; padding: 5px; border-radius: 5px; border: none;")
        send_button.clicked.connect(self.send_message)
        input_layout.addWidget(send_button)
        input_widget.setLayout(input_layout)
        chat_layout.addWidget(input_widget)

        main_layout.addWidget(chat_widget)

        # –°—Ç–∞—Ç—É—Å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        self.status_bar = QStatusBar()
        self.status_bar.setStyleSheet("color: #AAAAAA; background-color: #1E1E1E;")
        self.status_bar.showMessage("–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ DeepSeek API")
        self.setStatusBar(self.status_bar)

    def send_message(self):
        message = self.input_field.text().strip()
        if not message:
            return

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.chat_area.append(f"<b>–í—ã:</b> {message}")
        self.input_field.clear()
        self.status_bar.showMessage("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ API –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        thread = threading.Thread(target=self.get_deepseek_response, args=(message,), daemon=True)
        thread.start()

    def format_response(self, text):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        text = text.replace("\\n", "<br>")
        text = text.replace("\\t", "    ")
        text = text.strip()

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º markdown –≤ HTML
        try:
            html_text = markdown.markdown(text)
            return html_text
        except Exception as e:
            print(f"Markdown conversion error: {e}")
            return text

    def get_deepseek_response(self, message):
        self.conversation_history.append({"role": "user", "content": message})
        print(f"Conversation history: {self.conversation_history}")

        url = "https://openrouter.ai/api/v1/chat/completions"
        headers = {
            "Authorization": "Bearer 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",
            "Content-Type": "application/json",
            "X-Title": "AMD ChatBot Support"
        }
        data = {
            "model": "tngtech/deepseek-r1t-chimera:free",
            "messages": self.conversation_history
        }
        print(f"Sending request with data: {data}")

        try:
            response = requests.post(url, headers=headers, data=json.dumps(data), timeout=10)
            print(f"Raw response: {response.text}")
            response.raise_for_status()
            bot_response = response.json()["choices"][0]["message"]["content"]
            print(f"Parsed response: {bot_response}")

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            formatted_response = self.format_response(bot_response)
            self.conversation_history.append({"role": "assistant", "content": bot_response})

            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
            self.chat_area.append(f"<b>–ß–∞—Ç-–±–æ—Ç:</b>")
            self.chat_area.insertHtml(formatted_response + "<br>")
            self.status_bar.showMessage("–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ DeepSeek API")
        except Exception as e:
            print(f"Exception occurred: {str(e)}")
            self.chat_area.append(f"<b>–û—à–∏–±–∫–∞:</b> {str(e)}")
            self.status_bar.showMessage("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")

if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = ChatBotWindow()
    window.show()
    sys.exit(app.exec())